{"version":3,"sources":["dayHourCard/index.js","services/index.js","Dashboard/index.js","App.js","serviceWorker.js","index.js"],"names":["DayHourCard","weather","_this","this","forecastData","props","data","react_default","a","createElement","className","onClick","e","fetchHourlyData","date","hour","class","alt","src","getImage","max","min","React","Component","apiToken","Dashboard","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","city","cod","name","state","daily","hourly","dayData","hourData","citySelected","bind","assertThisInitialized","_this2","axios","get","then","resp","daysArr","filteredData","list","filter","n","dt_txt","split","indexOf","length","push","map","main","temp_min","temp_max","console","log","setState","_this3","fetchDaysData","_this4","_this$state","onChange","setCity","target","value","src_dayHourCard","App","src_Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qTAmCeA,gMA9BLC,GACR,OAAQA,GACP,IAAK,QACL,MAAO,8EACP,IAAK,SACL,MAAO,8EACP,QACA,MAAO,gHAGD,IAAAC,EAAAC,KACDC,EAAeD,KAAKE,MAAMC,KAChC,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBC,QAAS,SAAAC,GAAIV,EAAKG,MAAMQ,gBAAgBT,EAAaU,QACnFP,EAAAC,EAAAC,cAAA,WAAML,EAAaU,KAElBV,EAAaW,MAAQR,EAAAC,EAAAC,cAAA,QAAMO,MAAM,QAAZ,IAAqBZ,EAAaW,KAAlC,MAItBR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeO,IAAKb,EAAaH,QAASiB,IAAKf,KAAKgB,SAASf,EAAaH,WACzFM,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQN,EAAagB,IAArC,SACAb,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAYN,EAAaiB,IAAzC,kBAzBqBC,IAAMC,4BCF1BC,EAAW,uCC4GFC,cAvGd,SAAAA,EAAYpB,GAAM,IAAAH,EAAA,OAAAwB,OAAAC,EAAA,EAAAD,CAAAvB,KAAAsB,IACjBvB,EAAAwB,OAAAE,EAAA,EAAAF,CAAAvB,KAAAuB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA3B,KAAME,KACD0B,KAAO,CACX,CAACC,IAAI,QAAQC,KAAK,UAClB,CAACD,IAAI,QAAQC,KAAK,SAClB,CAACD,IAAI,QAAQC,KAAK,aAClB,CAACD,IAAI,QAAQC,KAAK,WAClB,CAACD,IAAI,QAAQC,KAAK,WAClB,CAACD,IAAI,QAAQC,KAAK,YAEnB/B,EAAKgC,MAAQ,CACZC,OAAM,EACNC,QAAO,EACPC,QAAQ,KACRC,SAAS,KACTC,aAAa,SAEdrC,EAAKW,gBAAkBX,EAAKW,gBAAgB2B,KAArBd,OAAAe,EAAA,EAAAf,CAAAxB,IAjBNA,+EAmBH,IDvBY6B,ECuBZW,EAAAvC,KACRoC,EAAepC,KAAK+B,MAAMK,cDxBNR,ECyBdQ,EDxBNI,IAAMC,IAAI,sDAAsDb,EAAK,UAAUP,ICyBpFqB,KAAK,SAACC,GACN,IAAMC,EAAU,GACZC,EAAeF,EAAKxC,KAAK2C,KAAKC,OAAO,SAAAC,GACxC,IAAIrC,EAAOqC,EAAEC,OAAOC,MAAM,KAAK,GAC/B,OAAGN,EAAQO,QAAQxC,GAAQ,GAAKiC,EAAQQ,OAAS,IAChDR,EAAQS,KAAK1C,IACN,KAITkC,EAAeA,EAAaS,IAAI,SAACnD,GAAD,MAAS,CACxCe,IAAIf,EAAKoD,KAAKC,SACdvC,IAAId,EAAKoD,KAAKE,SACd3D,QAAQK,EAAKL,QAAQ,GAAGyD,KACxB5C,KAAKR,EAAK8C,OAAOC,MAAM,KAAK,MAE7BQ,QAAQC,IAAId,GACZN,EAAKqB,SAAS,CAAC1B,QAAQW,EAAaZ,QAAO,8CAI7BtB,GAAK,IAAAkD,EAAA7D,KACpB,IAAGA,KAAK+B,MAAME,OAAd,CAGA,ID/C2BL,EC+CrBQ,EAAepC,KAAK+B,MAAMK,cD/CLR,ECgDdQ,ED/CPI,IAAMC,IAAI,6DAA6Db,EAAK,UAAUP,ICgD3FqB,KAAK,SAACC,GACN,IAAIE,EAAeF,EAAKxC,KAAK2C,KAAKC,OAAO,SAAAC,GACxC,OAAGA,EAAEC,OAAOC,MAAM,KAAK,KAAOvC,IAK/BkC,EAAeA,EAAaS,IAAI,SAACnD,GAAD,MAAS,CACxCe,IAAIf,EAAKoD,KAAKC,SACdvC,IAAId,EAAKoD,KAAKE,SACd3D,QAAQK,EAAKL,QAAQ,GAAGyD,KACxB5C,KAAKR,EAAK8C,OAAOC,MAAM,KAAK,GAC5BtC,KAAKT,EAAK8C,OAAOC,MAAM,KAAK,MAE7BQ,QAAQC,IAAId,GACZgB,EAAKD,SAAS,CAAC1B,QAAQW,EAAaZ,QAAO,uCAIrCG,GACPpC,KAAK4D,SAAS,CAACxB,aAAaA,gDAG5BpC,KAAK8D,cAAc9D,KAAK+B,MAAMK,+CAEvB,IAAA2B,EAAA/D,KAAAgE,EACoChE,KAAK+B,MAAzCG,EADA8B,EACA9B,QAASC,EADT6B,EACS7B,SAAUH,EADnBgC,EACmBhC,MAAOC,EAD1B+B,EAC0B/B,OAC3BL,EAAO5B,KAAK4B,KAClB,OACCxB,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdH,EAAAC,EAAAC,cAAA,UAAQ2D,SAAU,SAAAxD,GAAIsD,EAAKG,QAAQzD,EAAE0D,OAAOC,OAAOL,EAAKD,kBAEtDlC,EAAK0B,IAAI,SAAC1B,GAAD,OAASxB,EAAAC,EAAAC,cAAA,UAAQ8D,MAAOxC,EAAKC,KAAMD,EAAKE,UAMnDG,EAAS7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,mBAA+CH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,kBAEzDH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAEbyB,GAASE,GAAWA,EAAQoB,IAAI,SAACpB,GAAD,OAAY9B,EAAAC,EAAAC,cAAC+D,EAAD,CAAalE,KAAM+B,EAASxB,gBAAiBqD,EAAKrD,oBAG9FuB,GAAUE,GAAYA,EAASmB,IAAI,SAACnB,GAAD,OAAa/B,EAAAC,EAAAC,cAAA,eAAaH,KAAMgC,EAAUzB,gBAAiBqD,EAAKrD,6BAhGjFS,IAAMC,WCOfkD,MARf,WACE,OACElE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACiE,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1E,EAAAC,EAAAC,cAACyE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC","file":"static/js/main.6b133c76.chunk.js","sourcesContent":["import React from 'react';\nimport './dayHourCard.css';\n\nclass DayHourCard extends React.Component{\n\n\tgetImage(weather){\n\t\tswitch (weather){\n\t\t\tcase 'Clear':\n\t\t\treturn 'https://cdn2.iconfinder.com/data/icons/weather-flat-14/64/weather01-256.png';\n\t\t\tcase 'Clouds':\n\t\t\treturn 'https://cdn2.iconfinder.com/data/icons/weather-flat-14/64/weather04-256.png';\n\t\t\tdefault:\n\t\t\treturn 'https://cdn2.iconfinder.com/data/icons/weather-flat-14/64/weather01-256.png';\n\t\t}\n\t}\n\trender(){\n\t\tconst forecastData = this.props.data;\n\t\treturn (\n\t\t\t<div className=\"day-hour-card\" onClick={e=>{this.props.fetchHourlyData(forecastData.date)}}>\n\t\t\t\t<div>{forecastData.date}\n\t\t\t\t{\n\t\t\t\t\tforecastData.hour && <span class=\"time\"> {forecastData.hour} </span>\n\t\t\t\t}\n\t\t\t\t</div>\n\n\t\t\t\t<img className=\"weather-icon\" alt={forecastData.weather} src={this.getImage(forecastData.weather)}></img>\n\t\t\t\t<div>\n\t\t\t\t\t<span className=\"temp\">{forecastData.max} &deg;</span>\n\t\t\t\t\t<span className=\"temp min\">{forecastData.min} &deg;</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default DayHourCard;","import axios from 'axios';\nconst apiToken = 'ca67b1fbff53af6f5c9ee6add7958e7d';\nexport function getDaysData(city){\n\treturn axios.get('http://api.openweathermap.org/data/2.5/forecast?id='+city+'&APPID='+apiToken)\n}\n\nexport function getHoursData(city){\n\treturn axios.get('http://api.openweathermap.org/data/2.5/forecast/hourly?id='+city+'&APPID='+apiToken)\n}","import React from 'react';\nimport './Dashboard.css';\nimport DayHourCard from './../dayHourCard';\nimport { getDaysData, getHoursData } from './../services';\n\nclass Dashboard extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.city = [\n\t\t\t{cod:1275339,name:'Mumbai'},\n\t\t\t{cod:1273294,name:'Delhi'},\n\t\t\t{cod:1277333,name:'Bangalore'},\n\t\t\t{cod:1264527,name:'Chennai'},\n\t\t\t{cod:1275004,name:'Kolkata'},\n\t\t\t{cod:1264733,name:'Lucknow'},\n\t\t]\n\t\tthis.state = {\n\t\t\tdaily:true,\n\t\t\thourly:false,\n\t\t\tdayData:null,\n\t\t\thourData:null,\n\t\t\tcitySelected:1275339\n\t\t}\n\t\tthis.fetchHourlyData = this.fetchHourlyData.bind(this)\n\t}\n\tfetchDaysData(){\n\t\tconst citySelected = this.state.citySelected;\n\t\tgetDaysData(citySelected)\n\t\t.then((resp)=>{\n\t\t\tconst daysArr = []\n\t\t\tlet filteredData = resp.data.list.filter(n=>{\n\t\t\t\tlet date = n.dt_txt.split(\" \")[0];\n\t\t\t\tif(daysArr.indexOf(date) < 0 && daysArr.length < 5){\n\t\t\t\t\tdaysArr.push(date);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t})\n\t\t\tfilteredData = filteredData.map((data)=>({\n\t\t\t\tmin:data.main.temp_min,\n\t\t\t\tmax:data.main.temp_max,\n\t\t\t\tweather:data.weather[0].main,\n\t\t\t\tdate:data.dt_txt.split(\" \")[0]\n\t\t\t}));\n\t\t\tconsole.log(filteredData);\n\t\t\tthis.setState({dayData:filteredData,hourly:false})\n\t\t})\n\t}\n\n\tfetchHourlyData(date){\n\t\tif(this.state.hourly){\n\t\t\treturn;\n\t\t}\n\t\tconst citySelected = this.state.citySelected;\n\t\tgetHoursData(citySelected)\n\t\t.then((resp)=>{\n\t\t\tlet filteredData = resp.data.list.filter(n=>{\n\t\t\t\tif(n.dt_txt.split(\" \")[0] === date){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t})\n\t\t\tfilteredData = filteredData.map((data)=>({\n\t\t\t\tmin:data.main.temp_min,\n\t\t\t\tmax:data.main.temp_max,\n\t\t\t\tweather:data.weather[0].main,\n\t\t\t\tdate:data.dt_txt.split(\" \")[0],\n\t\t\t\thour:data.dt_txt.split(\" \")[1]\n\t\t\t}));\n\t\t\tconsole.log(filteredData);\n\t\t\tthis.setState({dayData:filteredData,hourly:true})\n\t\t})\n\t}\n\n\tsetCity(citySelected){\n\t\tthis.setState({citySelected:citySelected});\n\t}\n\tcomponentDidMount(){\n\t\tthis.fetchDaysData(this.state.citySelected);\n\t}\n\trender(){\n\t\tconst {dayData, hourData, daily, hourly} = this.state;\n\t\tconst city = this.city;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"header\">\n\t\t\t\t\t<select onChange={e=>{this.setCity(e.target.value);this.fetchDaysData()}}>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcity.map((city)=>(<option value={city.cod}>{city.name}</option>))\n\t\t\t\t\t\t}\n\t\t\t\t\t</select>\n\n\t\t\t\t</div>\n\t\t\t\t{\n\t\t\t\t\thourly ? <div className=\"label\">Hourly Forecast</div> : <div className=\"label\">5 Day Forecast</div>\n\t\t\t\t}\n\t\t\t\t<div className=\"forecast-container\">\n\t\t\t\t\t{\n\t\t\t\t\t\tdaily && dayData && dayData.map((dayData)=>(<DayHourCard data={dayData} fetchHourlyData={this.fetchHourlyData}></DayHourCard>))\n\t\t\t\t\t}\n\t\t\t\t\t{\n\t\t\t\t\t\thourly && hourData && hourData.map((hourData)=>(<dayHourCard data={hourData} fetchHourlyData={this.fetchHourlyData}></dayHourCard>))\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Dashboard;","import React from 'react';\nimport './App.css';\nimport Dashboard from './Dashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}